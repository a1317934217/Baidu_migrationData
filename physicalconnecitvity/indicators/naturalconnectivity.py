# -*- coding: utf-8 -*-
import datetime

import matplotlib
from math import e
from math import log

import networkx as nx
import numpy as np
import pandas as pd
# coding=utf-8
from matplotlib import pyplot as plt
from matplotlib.font_manager import FontProperties
from matplotlib.ticker import FuncFormatter, MaxNLocator

# listXData = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120', '20200121', '20200122', '20200123', '20200124', '20200125', '20200126', '20200127', '20200128', '20200129', '20200130', '20200131', '20200201', '20200202', '20200203', '20200204', '20200205', '20200206', '20200207', '20200208', '20200209', '20200210', '20200211', '20200212', '20200213', '20200214', '20200215', '20200216', '20200217', '20200218', '20200219', '20200220', '20200221', '20200222', '20200223', '20200224', '20200225', '20200226', '20200227', '20200228', '20200229', '20200301', '20200302', '20200303', '20200304', '20200305', '20200306', '20200307', '20200308', '20200309', '20200310', '20200311', '20200312', '20200313', '20200314', '20200315', '20200316', '20200317', '20200318', '20200319', '20200320', '20200321', '20200322', '20200323', '20200324', '20200325', '20200326', '20200327', '20200328', '20200329', '20200330', '20200331', '20200401', '20200402', '20200403', '20200404', '20200405', '20200406', '20200407', '20200408', '20200409', '20200410', '20200411', '20200412', '20200413', '20200414', '20200415', '20200416', '20200417', '20200418', '20200419', '20200420', '20200421', '20200422', '20200423', '20200424', '20200425', '20200426', '20200427', '20200428', '20200429', '20200430', '20200501', '20200502', '20200503', '20201001', '20201002', '20201003', '20201004', '20201005', '20201006', '20201007', '20201008', '20201009', '20201010', '20201011', '20201012', '20201013', '20201014', '20201015', '20201016', '20201017', '20201018', '20201019', '20201020', '20201021', '20201022', '20201023', '20201024', '20201025', '20201026', '20201027', '20201028', '20201029', '20201030', '20201031', '20201101', '20201102', '20201103', '20201104', '20201105', '20201106', '20201107', '20201108', '20201109', '20201110', '20201111', '20201112', '20201113', '20201114', '20201115', '20201116', '20201117', '20201118', '20201119', '20201120', '20201121', '20201122', '20201123', '20201124', '20201125', '20201126', '20201127', '20201128', '20201129', '20201130', '20201201', '20201202', '20201203', '20201204', '20201205', '20201206', '20201207', '20201208', '20201209', '20201210', '20201211', '20201212', '20201213', '20201214', '20201215', '20201216', '20201217', '20201218', '20201219', '20201220', '20201221', '20201222', '20201223', '20201224', '20201225', '20201226', '20201227', '20201228', '20201229', '20201230', '20201231', '20210101', '20210102', '20210103', '20210104', '20210105', '20210106', '20210107', '20210108', '20210109', '20210110', '20210111', '20210112', '20210113', '20210114', '20210115', '20210116', '20210117', '20210118', '20210119', '20210120', '20210121', '20210122', '20210123', '20210124', '20210125', '20210126', '20210127', '20210128', '20210129', '20210130', '20210131', '20210201', '20210202', '20210203', '20210204', '20210205', '20210206', '20210207', '20210208', '20210209', '20210210', '20210211', '20210212', '20210213', '20210214', '20210215', '20210216', '20210217', '20210218', '20210219', '20210220', '20210221', '20210222', '20210223', '20210224', '20210225', '20210226', '20210227', '20210228', '20210301', '20210302', '20210303', '20210304', '20210305', '20210306', '20210307', '20210308', '20210309', '20210310', '20210311', '20210312', '20210313', '20210314', '20210315', '20210316', '20210317', '20210318', '20210319', '20210320', '20210321', '20210322', '20210323', '20210324', '20210325', '20210326', '20210327', '20210328', '20210329', '20210330', '20210331', '20210401', '20210402', '20210403', '20210404', '20210405', '20210406', '20210407', '20210408', '20210409', '20210410', '20210411', '20210412', '20210413', '20210414', '20210415', '20210416', '20210417', '20210418', '20210419', '20210420', '20210421', '20210422', '20210423', '20210424', '20210425', '20210426', '20210427', '20210428', '20210429', '20210430', '20210501', '20210502', '20210503', '20210504', '20210505', '20210506', '20210507', '20210508', '20210509', '20210510', '20210511', '20210512', '20210513', '20210514', '20210515', '20210516', '20210517', '20210518', '20210519', '20210520', '20210521', '20210522', '20210523', '20210524', '20210525', '20210526', '20210527', '20210528', '20210529', '20210530', '20210531', '20210601', '20210602', '20210603', '20210604', '20210605', '20210606', '20210607', '20210608', '20210609', '20210610', '20210611', '20210612', '20210613', '20210614', '20210615', '20210616', '20210617', '20210618', '20210619', '20210620', '20210621', '20210622', '20210623', '20210624', '20210625', '20210626', '20210627', '20210628', '20210629', '20210630', '20210701', '20210702', '20210703', '20210704', '20210705', '20210706', '20210707', '20210709', '20210710', '20210711', '20210712', '20210713', '20210714', '20210715', '20210716', '20210717', '20210718', '20210719', '20210720', '20210721', '20210722', '20210723', '20210724', '20210725', '20210726', '20210727', '20210728', '20210729', '20210730', '20210801', '20210802', '20210803', '20210804', '20210805', '20210806', '20210807', '20210808', '20210809', '20210810', '20210811', '20210813', '20210814', '20210815', '20210816', '20210817', '20210818', '20210819', '20210820', '20210821', '20210822', '20210823', '20210824', '20210826', '20210827', '20210828', '20210829', '20210830', '20210901', '20210902', '20210903', '20210904', '20210905', '20210906', '20210907', '20210908', '20210909', '20210910', '20210911', '20210912', '20210913', '20210914', '20210915', '20210916', '20210917', '20210918', '20210919', '20210920', '20210921', '20210922', '20210923', '20210924', '20210925', '20210926', '20210927', '20210928', '20210929', '20211001', '20211002', '20211003', '20211004', '20211005', '20211006', '20211007', '20211008', '20211009', '20211010', '20211011', '20211012', '20211013', '20211014', '20211015', '20211016', '20211017', '20211018', '20211019', '20211020', '20211021', '20211022', '20211023', '20211024', '20211025', '20211026', '20211027', '20211028']

listXData = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120', '20200121', '20200122', '20200123', '20200124', '20200125', '20200126', '20200127', '20200128', '20200129', '20200130', '20200131', '20200201', '20200202', '20200203', '20200204', '20200205', '20200206', '20200207', '20200208', '20200209', '20200210', '20200211', '20200212', '20200213', '20200214', '20200215', '20200216', '20200217', '20200218', '20200219', '20200220', '20200221', '20200222', '20200223', '20200224', '20200225', '20200226', '20200227', '20200228', '20200229', '20200301', '20200302', '20200303', '20200304', '20200305', '20200306', '20200307', '20200308', '20200309', '20200310', '20200311', '20200312', '20200313', '20200314', '20200315', '20200316', '20200317', '20200318', '20200319', '20200320', '20200321', '20200322', '20200323', '20200324', '20200325', '20200326', '20200327', '20200328', '20200329', '20200330', '20200331', '20200401', '20200402', '20200403', '20200404', '20200405', '20200406', '20200407', '20200408', '20200409', '20200410', '20200411', '20200412', '20200413', '20200414', '20200415', '20200416', '20200417', '20200418', '20200419', '20200420', '20200421', '20200422', '20200423', '20200424', '20200425', '20200426', '20200427', '20200428', '20200429', '20200430', '20200501', '20200502', '20200503']

fileNamePath = "F:\\01大连民族\\百度迁徙爬取和数据\\百度迁徙数据-final\\03将两个In和Out相同行合并_最终数据\\"

# 多重边无向图
# coding=utf-8
# 多重边无向图
# 自然连通度


# 根据路径画图
def drawpicture(filePath):
    """
    输入文件路径最后绘制成图G
    """
    G = nx.Graph()
    try:
        dataMiga = pd.read_csv(filePath)
    except Exception as problem:
        print("error根据路径画图出现问题：", problem)
    # 得到每一行的数据
    for row in dataMiga.itertuples():
        city_name = getattr(row, "city_name")
        city_id_name = getattr(row, "city_id_name")
        G.add_edges_from([(city_name, city_id_name)])
    return G


# 获取时间列表
def getdaylist(begin, end):
    """
    获取时间列表
    """
    beginDate = datetime.datetime.strptime(str(begin), "%Y%m%d")
    endDate = datetime.datetime.strptime(str(end), "%Y%m%d")
    dayList = []
    while beginDate <= endDate:
        dayList.append(datetime.datetime.strftime(beginDate, "%Y%m%d"))
        beginDate += datetime.timedelta(days=+1)
    return dayList


# 计算自然连通性
def naturecconnectivity():
    """
    返回绘制图表的
    X轴：日期
    Y轴：自然连通度数值
    """

    # 时间列表


    listAlgebraicConnectivity = []

    for i in range(len(listXData)):
        # 循环画图
        try:
            filePathInMethon = fileNamePath + listXData[i] + "finalData.csv"
            print(filePathInMethon)
            G = drawpicture(filePathInMethon)
        except Exception as problem:
            print("(自然连通度) error打开迁徙文件出问题：", problem)
        else:
            # 生成邻接矩阵 直接转为稠密矩阵
            Gadjacency = np.array(nx.adjacency_matrix(G).todense())
            # 求特征值和特征向量
            eigenvalue, featurevector = np.linalg.eig(Gadjacency)
            # 取到所有点
            nodes = len(G.nodes())
            # 定义分子
            molecular = 0
            for eigenvalueNeed in eigenvalue:
                # 开始求自然连通度 ln()里的分子
                molecular = molecular + e ** eigenvalueNeed
            # 自然连通度的值
            algebraicConnectivityValue = log(molecular/nodes, e)
            # 作为Y轴
            listAlgebraicConnectivity.append(algebraicConnectivityValue)
    print("(自然连通度)X轴数值： ", listXData)
    print("(自然连通度)Y轴数值： ", listAlgebraicConnectivity)

    # 画图 设置X轴显示效果
    fig = plt.figure()
    ax = fig.add_subplot(111)
    # 为了设置x轴时间的显示
    def format_fn(tick_val, tick_pos):
        if int(tick_val) in range(len(listXData)):
            return listXData[int(tick_val)]
        else:
            return ''

    ax.xaxis.set_major_formatter(FuncFormatter(format_fn))
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))

    # plt.ylim((-5, 40))
    # 横坐标每个值旋转90度
    # plt.xticks(rotation=90)
    # 设置Mac上的字体
    # font = FontProperties(fname='/Library/Fonts/Arial Unicode.ttf')
    font = matplotlib.font_manager.FontProperties(
        fname='C:\\Windows\\Fonts\\SimHei.ttf')
    # 坐标轴ticks的字体大小
    plt.tick_params(labelsize=5)
    plt.yticks(fontsize=10)
    plt.xticks(fontsize=7)
    plt.xlabel('日期', FontProperties=font)
    plt.ylabel('自然连通行数值', FontProperties=font)
    plt.title('百度迁徙2020上半年自然连通性折线图', FontProperties=font)
    ax.plot(listXData, listAlgebraicConnectivity,"m.-", linewidth=1, color='blue')
    plt.show()

# 直接调用函数画图
naturecconnectivity()
# 最新一次的跑出结果
# (自然连通度)Y轴数值：  [3.8054211516065135, 4.189661893412327, 5.815635509505449, 6.2575356473157315, 6.495924837711522, 6.101382569388786, 6.042802196637723, 6.54132670808149, 6.7659906497323865, 6.070756672664894, 6.255365269235537, 5.312224509519529, 5.7242177874758, 5.238420365920898, 5.284454694251656, 5.01873187728914, 4.6195159637947, 4.902559251198258, 4.581515199732916, 4.553608012837706, 4.888824492083416, 4.340743765359146, 3.958869428897951, 3.1580743584607647, 2.4532991690644463, 3.826970184151142, 3.185306653208051, 2.272478425586528, 1.9224243425377507, 1.6875987107719514, 1.4241767844375044, 1.1843099181064112, 1.3501382161677478, 1.1779588057665615, 1.0068654090954643, 0.9591263765511722, 0.9549784975292833, 0.9108907783592766, 1.0127400003165794, 0.9110228849250827, 0.962932622075445, 0.8643395539568397, 0.773339002998245, 0.7690104040745711, 0.7641323690701971, 0.7743908379173462, 0.7174330188402992, 1.0231040229077941, 1.031220841841568, 1.0728923128757877, 1.075706335933197, 1.2092959692499317, 1.3708873855994008, 1.3247716559564846, 1.6643307033737536, 1.639692475157782, 1.6427462495041156, 1.6194756989410886, 1.8101346089828874, 2.0930715739450787, 1.9816221052133336, 1.9755974856465264, 1.969227980018581, 1.976156912642961, 1.9787349160850156, 2.1256313968406912, 2.372593727281496, 2.1458544637529497, 2.5769202400259674, 2.3579150526149166, 2.2382183327732617, 2.4005282861791923, 2.624630573785448, 3.207923309536434, 2.8083979474742105, 3.147583518140432, 2.80023951794792, 2.7930670961914887, 2.856617555096874, 3.1069287198215316, 3.618273860575515, 3.329034879538445, 3.4955640852681493, 3.2142352841728874, 3.2358774714696614, 3.165957791280254, 3.2995138440682643, 3.379579195338067, 3.68127597358591, 3.7398041445963175, 3.6314436733089117, 3.3238577221119896, 2.9862818271500897, 3.3480315847451836, 3.8322700595773544, 4.463167246716932, 2.8004552389569937, 2.922353243991577, 2.6244226598473213, 2.197670242003376, 2.901925271173437, 3.4348219158618334, 3.4971064779915704, 3.895989971442967, 3.7065415181986223, 3.722149850865753, 3.7516791305090673, 3.8868387620746954, 3.759759258550909, 3.970183030794682, 4.064482664466997, 3.86997776696022, 3.791220427017696, 3.1570101401874706, 3.926812959279974, 3.964796449918724, 3.6385047405465376, 3.7800432099633796, 4.057582723926704, 3.8459571840578124, 4.040433691340066, 6.609114940168138, 5.063703957021435, 6.2383864933104896, 8.139836145766923, 6.782633854890923, 8.551794324325558, 8.081871495910633, 7.473719272098521, 7.051364647085938, 5.586384751241432, 5.614428047160591, 5.399394279719001, 4.4229038528300695, 4.204632895226212, 5.06754168782897, 4.633954180320933, 4.59396973395762, 4.2247829860121655, 5.3642014400175615, 5.432678215575015, 4.647970051562824, 5.459682957622101, 4.944553820399446, 4.732592346372051, 4.560574162770469, 5.199599963673908, 5.307783493609319, 4.5806758738680555, 5.417537627515375, 4.892421842962634, 4.5715680669631, 4.023280298222803, 5.3177580242442275, 5.501048413726675, 4.869861946451557, 5.1299651275442635, 4.240454203442784, 4.921246947237456, 4.616866342577563, 5.00006624454776, 5.388659361791185, 4.108353028588986, 5.77455537359154, 4.6957033597835505, 4.317371888881116, 4.333118327244045, 4.1430384493889045, 4.519019072441887, 4.045288217954833, 4.64961084956392, 4.649224078620835, 4.299904860116309, 4.3399539807818845, 4.0522188187397585, 4.637772093406228, 3.959110448037748, 4.494537242994187, 4.434518208633876, 3.228933540679539, 3.418818914196898, 3.7115268853377676, 4.226829985877534, 3.5540062697499724, 4.073001506072271, 3.542214714301601, 3.480284555274379, 3.3337265138140015, 3.6864065135870425, 4.350306727022128, 3.518012645538708, 4.597827015637532, 3.6264701579547043, 3.613061490850449, 3.5146261419976135, 3.8185539340253283, 4.242031710624784, 3.8080732007071982, 4.295316609257212, 3.7130925417272924, 3.5241487304264707, 3.6497819132398863, 4.011984983711718, 4.428468805652064, 4.340305789709997, 4.687225234455817, 4.107520483905678, 3.967286557908669, 4.072986601423447, 3.460350057935867, 4.172572572917033, 3.535367929267354, 4.755863012536603, 3.901082806916399, 3.2816978206681457, 4.280333048792345, 5.390601825192768, 4.191069340148773, 4.220566471700914, 4.614352066657721, 1.7934212401481615, 1.891360686435899, 2.3911069552619755, 3.706885064756972, 3.6215112707564945, 3.0859358373230807, 3.939626413028775, 3.537239093677893, 3.5776359110261238, 3.68564582955891, 3.9200041434547463, 4.136035294485395, 3.5251072753325254, 4.158689110218596, 3.5725693332973405, 3.483028825607531, 3.266063785987412, 3.293328673531669, 3.3435262004259263, 2.9277877619880543, 3.6271770936241, 3.185252480683911, 2.958832251661471, 2.7513344199986496, 2.5800294185625967, 2.6404516078948217, 2.1175307205989746, 2.894673387675013, 2.4693514774743286, 2.4100916054962496, 2.3702064489103747, 2.5186848400167947, 2.588877627134104, 2.5078525210297844, 2.6132735079125045, 2.6065057931379783, 2.58940756743972, 2.503456866505385, 2.140103190177441, 3.0561773511045423, 4.321559478505123, 4.835034138606837, 4.002959671986827, 3.713528715131199, 3.2893985324299626, 3.0141682319312855, 2.9660242705908035, 3.0694829094743814, 3.1758477836639547, 3.1107620434470635, 3.0887669008258665, 3.0676657166815877, 3.426852697893215, 4.586098131213031, 4.017162194323097, 4.6269013865556605, 4.000801991938749, 3.8206784138691456, 3.9867378558429456, 4.305039762217251, 4.8769800405376325, 4.013696393573508, 4.459127540550642, 4.029103727230086, 4.051050359458611, 4.05879674855956, 4.388149554049355, 4.991764676226759, 4.334122877616389, 5.117578980207079, 4.629787125240978, 4.6678300501871774, 4.631007865082397, 5.079844138897375, 5.402660079613602, 4.589223100305408, 5.371919056611514, 4.739583510102426, 4.6796374824923825, 4.649744860521833, 4.9012547706566325, 5.3097709414812515, 4.782398019819609, 6.051047536815983, 5.041447760476707, 4.821069013025669, 4.485373096305919, 5.243130719772162, 7.18644098787585, 5.605436323802999, 5.921706824251897, 6.5511570566637936, 4.834707359691427, 4.49265046946368, 4.918068250774369, 5.564480563057868, 4.58087529081184, 5.539453570280568, 4.962043019389667, 5.601215645692727, 5.878268398608403, 6.008336114346394, 6.506754752122363, 5.654317024120273, 6.319787341989789, 5.706151053398965, 5.65682261265871, 5.564624546869347, 5.8711444018390395, 5.890051874861024, 5.489974953823863, 5.866028172855267, 5.403797850796352, 5.274600294140824, 5.474285738170985, 7.067167277727689, 11.511282682669485, 10.077927996151512, 9.595116811057805, 8.227513336934074, 9.444675604243084, 8.05186138125761, 5.562759594853942, 5.079514796705244, 5.27786747735495, 5.642869110587918, 5.584542259957201, 5.305020617297333, 5.431284429948237, 5.793812452414329, 5.986350406016537, 5.26059750931069, 5.844429091319266, 5.405871663071482, 5.32796755275797, 5.418874846030675, 5.763007208432751, 6.122287446164625, 5.049917858499224, 5.845620389344513, 5.349311223116585, 5.1318398820671804, 4.948063555685915, 5.265076236811713, 5.819753599606885, 4.794209701875529, 5.649590339724651, 4.566798014439524, 5.285288660838488, 4.903525775735581, 5.156634061062528, 5.675263710161708, 5.021410465163084, 6.083283514823328, 5.141598034625393, 5.059791869603971, 5.152154850234366, 5.274627930840837, 7.9488023540626935, 5.738506610093499, 6.31833760212599, 6.234798375127812, 6.162610145983492, 5.052945723856243, 5.274942509029661, 5.930415273754354, 5.152033538061406, 5.935913049707411, 5.210184626022176, 5.1764392017252, 5.246420619613396, 5.726198223780495, 6.114167157035165, 5.493748590931389, 6.2974081455984745, 5.665548867424256, 6.107759033630603, 6.740530014389023, 6.848269298870809, 7.46952356230877, 6.714994640985938, 6.255256615851217, 5.9999483974536165, 6.20385549704992, 7.148176114366005, 7.552017690649582, 7.132665077057828, 7.486073667566573, 6.5760791632296645, 6.364227547194422, 6.407791302603994, 6.842682247475641, 7.3015770053576965, 7.066405104326583, 7.319811330720521, 6.642625667536099, 6.28564331256303, 5.849611233490274, 5.8836653728246056, 5.784956251344946, 4.765104950392214, 5.229065476287165, 4.889034965308475, 5.750087071549525, 4.6400847638961, 4.688614255672553, 4.951991064522756, 5.210890308198339, 4.153764911885352, 3.722577251868207, 3.5430588692087666, 3.483416225149718, 3.627346185257077, 3.555109245317487, 3.964098551463582, 3.5230030303256834, 3.04633900347813, 3.5649149961283473, 3.979006686454116, 3.874001224096837, 4.367421007088825, 3.6433512952465805, 3.2493602913333897, 3.272553284779564, 3.199276933922501, 3.272858663536748, 3.3528021454880363, 3.9492384628695776, 3.5438775785659726, 3.6996234017803764, 3.8085802868193652, 4.289911764625822, 4.161186384610692, 4.308549463857966, 4.084178636042229, 3.9218024414485186, 4.277460540383355, 4.918615950858852, 4.332263258920933, 4.904218279509747, 4.344553370904291, 4.348324433202171, 4.426732645697214, 4.746744974928501, 4.981643600028601, 4.262984922964991, 4.842291623456419, 4.147586875720227, 5.686767995719914, 5.731415993394383, 5.445363532718, 6.120098883389709, 6.678327439671015, 5.196987174744532, 5.9049879075463965, 6.843691103516681, 6.027015374657139, 5.278932313371931, 5.426190917556423, 5.72019408400925, 5.894110361285991, 5.39973569162718, 5.443934830144252, 10.998080375986271, 8.07422285502252, 9.298590009534925, 9.474609103389946, 7.74888310614475, 7.204253978321326, 7.259227036792803, 6.5910791114303, 5.167133795620911, 5.081478078574929, 6.052209739131354, 5.718884419573413, 5.7170996757797585, 5.920414409018305, 6.264173772167039, 6.594356312480453, 5.937485595323078, 6.537922747901237, 5.873282304282937, 5.816694046971884, 5.755504822645795, 6.186392508814013, 6.324935052558712, 5.523805260806947, 6.181117010908876, 5.089230286458332, 4.917276918071905, 4.944747907631028]


