#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2022/2/13 18:00
# @Author  : wuhao
# @Email   : guess?????
# @File    : diversityvalue.py
# 生成邻接矩阵 直接转为稠密矩阵
import networkx as nx
import numpy as np
import pandas as pd

# 根据路径画图
def drawpicture(filePath):
    """
    输入文件路径最后绘制成图G
    """
    G = nx.Graph()
    try:
        dataMiga = pd.read_csv(filePath)
    except Exception as problem:
        print("error根据路径画图出现问题：", problem)
    # 得到每一行的数据
    for row in dataMiga.itertuples():
        city_name = getattr(row, "city_name")
        city_id_name = getattr(row, "city_id_name")
        G.add_edges_from([(city_name, city_id_name)])
    return G

listXData = ['20200101', '20200102', '20200103', '20200104', '20200105', '20200106', '20200107', '20200108', '20200109', '20200110', '20200111', '20200112', '20200113', '20200114', '20200115', '20200116', '20200117', '20200118', '20200119', '20200120', '20200121', '20200122', '20200123', '20200124', '20200125', '20200126', '20200127', '20200128', '20200129', '20200130', '20200131', '20200201', '20200202', '20200203', '20200204', '20200205', '20200206', '20200207', '20200208', '20200209', '20200210', '20200211', '20200212', '20200213', '20200214', '20200215', '20200216', '20200217', '20200218', '20200219', '20200220', '20200221', '20200222', '20200223', '20200224', '20200225', '20200226', '20200227', '20200228', '20200229', '20200301', '20200302', '20200303', '20200304', '20200305', '20200306', '20200307', '20200308', '20200309', '20200310', '20200311', '20200312', '20200313', '20200314', '20200315', '20200316', '20200317', '20200318', '20200319', '20200320', '20200321', '20200322', '20200323', '20200324', '20200325', '20200326', '20200327', '20200328', '20200329', '20200330', '20200331', '20200401', '20200402', '20200403', '20200404', '20200405', '20200406', '20200407', '20200408', '20200409', '20200410', '20200411', '20200412', '20200413', '20200414', '20200415', '20200416', '20200417', '20200418', '20200419', '20200420', '20200421', '20200422', '20200423', '20200424', '20200425', '20200426', '20200427', '20200428', '20200429', '20200430', '20200501', '20200502', '20200503']

fileNamePath = "F:\\01大连民族\\百度迁徙爬取和数据\\百度迁徙数据-final\\03将两个In和Out相同行合并_最终数据\\"
# 计算代数连通性
def create_migration_adjacencyList(allFilePath,listXData):
    for i in range(len(listXData)):
        # 循环画图
        try:
            filePathInMethon = allFilePath + listXData[i] + "finalData.csv"
            G = drawpicture(filePathInMethon)
        except Exception as problem:
            print("(代数连通性) error打开迁徙文件出问题：", problem)
        else:
            df = nx.to_pandas_adjacency(G)
            df.to_csv("F:\\01大连民族\\diversity\\"+listXData[i]+"diversity.csv", index=False, encoding="utf-8-sig")
# #创建图的邻接链表
# G.create_graph_adjacencyList()
# #打印图的邻接链表
# print(G.print_graph_adjacencyList())
# create_migration_adjacencyList(fileNamePath,listXData)
listdata_nedd = "11.0467565 10.4143791 10.6792618 11.0069565  9.9716660 10.0317932 10.3805282 10.0761682 10.0819356 11.2123333 10.2053234 11.5267687 10.0794179 11.5911497 11.7364349 13.2694664 13.1451618 13.2131232 12.6325567 12.7940908 12.7770136 13.2578961 12.6030407 12.2881047  8.8804149 14.5395934  9.2148215  8.8236343 5.3748400  5.0241039  4.7363455  2.9934321  4.8584100  2.9738584  1.5617269 1.5347276  1.6017368  1.6411879  1.5619876  1.1773876  1.0977770  1.0001860 0.9387184  0.9570712  0.9282921  0.9677364  0.8564552  1.6862088  1.6370544 1.8882165  1.8938516  2.4721189  4.1122906  4.0887557  5.4418823  5.2805352 5.4263654  5.7740654  5.5846699  6.0871438  5.9308016  5.2490831  5.6893103 6.1159627  6.0157129  6.1593232  6.0997549  5.7190474  5.6616516  6.2623960 6.8609723  8.2477435  8.9890626  9.0097453 10.9431358  9.5056976  9.3665674 9.1987167  9.0442273 12.4817441 14.2590462 14.5927920 13.0451373 12.6186540 14.4169829 14.9150280 13.2162682 13.2225916 15.1895861 14.5080729 15.0427307 14.1016622  7.8051120 10.8486409 14.5584666 14.2350807 10.8333104  9.8169816 11.8762854  4.9241581 11.1379929 14.4928798 14.9742964 14.9672658 14.9990497 14.8512505 14.9155360 15.1878305 14.6268763 15.1428321 15.0267199 14.5349963 14.3708121 13.7816079 14.6260605 14.6799684 17.1097417 18.2793736 18.7497485 17.3960220 17.4886341 14.7077254 17.7568586 18.3017645"
listdata_dou = listdata_nedd.replace(" ",",")
print(listdata_dou)
list1 ="11.0467565,10.4143791,10.6792618,11.0069565,,9.9716660,10.0317932,10.3805282,10.0761682,10.0819356,11.2123333,10.2053234,11.5267687,10.0794179,11.5911497,11.7364349,13.2694664,13.1451618,13.2131232,12.6325567,12.7940908,12.7770136,13.2578961,12.6030407,12.2881047,,8.8804149,14.5395934,,9.2148215,,8.8236343,5.3748400,,5.0241039,,4.7363455,,2.9934321,,4.8584100,,2.9738584,,1.5617269,1.5347276,,1.6017368,,1.6411879,,1.5619876,,1.1773876,,1.0977770,,1.0001860,0.9387184,,0.9570712,,0.9282921,,0.9677364,,0.8564552,,1.6862088,,1.6370544,1.8882165,,1.8938516,,2.4721189,,4.1122906,,4.0887557,,5.4418823,,5.2805352,5.4263654,,5.7740654,,5.5846699,,6.0871438,,5.9308016,,5.2490831,,5.6893103,6.1159627,,6.0157129,,6.1593232,,6.0997549,,5.7190474,,5.6616516,,6.2623960,6.8609723,,8.2477435,,8.9890626,,9.0097453,10.9431358,,9.5056976,,9.3665674,9.1987167,,9.0442273,12.4817441,14.2590462,14.5927920,13.0451373,12.6186540,14.4169829,14.9150280,13.2162682,13.2225916,15.1895861,14.5080729,15.0427307,14.1016622,,7.8051120,10.8486409,14.5584666,14.2350807,10.8333104,,9.8169816,11.8762854,,4.9241581,11.1379929,14.4928798,14.9742964,14.9672658,14.9990497,14.8512505,14.9155360,15.1878305,14.6268763,15.1428321,15.0267199,14.5349963,14.3708121,13.7816079,14.6260605,14.6799684,17.1097417,18.2793736,18.7497485,17.3960220,17.4886341,14.7077254,17.7568586,18.3017645"



